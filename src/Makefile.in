.PHONY: all build clang clangdebug clangsloppy clangstrict clean debug export fastclean opt rebuild run sloppy strict test testbuild version

clang ?= 0
strict ?= 0
debug ?= 0
opt ?= 0
sloppy ?= 0
win64 ?= $(shell grep -q -F '\#include <windows.h>' main.* 2>/dev/null && echo 1 || echo 0)
patch_paths ?= 0
run ?= 0

std ?= c++17
PYMAKE ?= @@PYMAKE@@
PREFIX ?= @@PREFIX@@
system_include_dir ?= ${PREFIX}/include

CXX ?= c++

# the name of the installed executable and related directories
NAME ?= $(shell basename $(CURDIR))

# the directory of this Makefile
ROOTDIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

# used by the "pkg" target
ifeq ($$pkgdir,)
  pkgdir := $$pkgdir
else
  pkgdir ?= ${PWD}/pkg
endif

# building the main executable, or the tests
CMD := $(shell test -f main.cpp -o -f main.cc -o -f main.cxx || echo testbuild)

# The Python 2 file
SCONSFILEARG := --file="${ROOTDIR}/SConstruct"

# Thanks: https://stackoverflow.com/a/14061796/131264
# If the first argument is "run"...
ifeq (run,$(firstword $(MAKECMDGOALS)))
  # use the rest as arguments for "run"
  RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # ...and turn them into do-nothing targets
  $(eval $(RUN_ARGS):;@:)
endif

# If the first argument is "run"...
ifeq (run,$(firstword $(MAKECMDGOALS)))
  # use the rest as arguments as flags "run"
  RUN_FLAGS := $(wordlist 2,$(words $(MAKEFLAGS)),$(MAKEFLAGS))
  # ...and turn them into do-nothing targets
  $(eval $(RUN_FLAGS):;@:)
endif


all: build

version:
	@echo sakemake @@VERSION@@
	@${PYMAKE} --version | head -1
	@echo '   SCons '$$(scons --version | grep ": v" | head -1 | cut -d: -f2 | cut -dv -f2 | cut -b-5)

build:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

opt:
	@scons ${SCONSFILEARG} -Q ${CMD} opt=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

small:
	@scons ${SCONSFILEARG} -Q ${CMD} small=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

strict:
	@scons ${SCONSFILEARG} -Q ${CMD} strict=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

sloppy:
	@scons ${SCONSFILEARG} -Q ${CMD} sloppy=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

testbuild:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

test:
	@scons ${SCONSFILEARG} -Q test clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clang:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangstrict:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 strict=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangsloppy:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 sloppy=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangdebug:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 debug=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

debug:
	@scons ${SCONSFILEARG} -Q ${CMD} debug=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

run:
	@scons ${SCONSFILEARG} -Q run clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir} run=1 args="${RUN_ARGS} $(strip $(subst --,,$(subst --no-print-directory,,${MAKEFLAGS})))"

rebuild: clean build

main: $(wildcard main.c*)
	@scons ${SCONSFILEARG} -Q clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir="${system_include_dir}" imgdir="${PREFIX}/share/${NAME}/img" datadir="${PREFIX}/share/${NAME}/data" shaderdir="${PREFIX}/share/${NAME}/shaders" sharedir="${PREFIX}/share/${NAME}"

# Change the img, data or resource paths in main.cpp, main.cc or main.cxx to point to the system directories before compiling and installing on the system
#
# These strings are recognized and modified, at installation time:
# ../img
# ../data
# ../shaders
# ./img
# ./data
# ./shaders
# "img/
# "data/
# "shaders/
#
patch:
	@if [ ${patch_paths} = 1 ]; then \
	  for ext in cpp cc cxx; do \
	    test -f main.$$ext && \
		cp -f -v main.$$ext main.$$ext.bak && \
		sed "s:\.\./img:${PREFIX}/share/${NAME}/img:g;s:\./img:${PREFIX}/share/${NAME}/img:g;s:\"img/:\"${PREFIX}/share/${NAME}/img/:g;s:\.\./data:${PREFIX}/share/${NAME}/data:g;s:\./data:${PREFIX}/share/${NAME}/data:g;s:\"data/:\"${PREFIX}/share/${NAME}/data/:g;s:\.\./shaders:${PREFIX}/share/${NAME}/shaders:g;s:\./shaders:${PREFIX}/share/${NAME}/shaders:g;s:\"shaders/:\"${PREFIX}/share/${NAME}/shaders/:g" < main.$$ext.bak > main.$$ext; \
	  done || \
	  true; \
	fi

unpatch:
	@if [ ${patch_paths} = 1 ]; then \
	  for ext in cpp cc cxx; do \
	    test -f main.$$ext.bak && \
		mv -v -f main.$$ext.bak main.$$ext || \
		true; \
	  done; \
	fi

# install the executable, data/*, img/*, shaders/* or share/* into a shared directory, also install the license, if available
install: patch main unpatch
	@install -d "${DESTDIR}${PREFIX}/bin"
	@if [ ${win64} = 0 ]; then \
	  install -m755 "${NAME}" "${DESTDIR}${PREFIX}/bin/${NAME}" || \
	  install -m755 src/main "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	else \
	  install -m755 "${NAME}.exe" "${DESTDIR}${PREFIX}/bin/${NAME}.exe" || \
	  install -m755 src/main.exe "${DESTDIR}${PREFIX}/bin/${NAME}.exe"; \
	  echo '#!/bin/sh' > "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	  echo 'wine ${PREFIX}/bin/${NAME}.exe "$$@"' >> "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	  chmod 755 "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	fi
	@test -d img && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/img" && \
	  cp -r img/* "${DESTDIR}${PREFIX}/share/${NAME}/img/" || \
	  true
	@test -d imgs && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/img" && \
	  cp -r imgs/* "${DESTDIR}${PREFIX}/share/${NAME}/img/" || \
	  true
	@test -d data && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/data" && \
	  cp -r data/* "${DESTDIR}${PREFIX}/share/${NAME}/data/" || \
	  true
	@test -d datas && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/data" && \
	  cp -r datas/* "${DESTDIR}${PREFIX}/share/${NAME}/data/" || \
	  true
	@test -d shaders && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/shaders" && \
	  cp -r shaders/* "${DESTDIR}${PREFIX}/share/${NAME}/shaders/" || \
	  true
	@test -d shader && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/shaders" && \
	  cp -r shader/* "${DESTDIR}${PREFIX}/share/${NAME}/shaders/" || \
	  true
	@test -d share && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}" && \
	  cp -r share/* "${DESTDIR}${PREFIX}/share/${NAME}/" || \
	  true
	@test -f COPYING && \
	  install -d "${DESTDIR}${PREFIX}/share/licenses/${NAME}" && \
	  install -m644 COPYING "${DESTDIR}${PREFIX}/share/licenses/${NAME}/COPYING" || \
	  true
	@test -f LICENSE && \
	  install -d "${DESTDIR}${PREFIX}/share/licenses/${NAME}" && \
	  install -m644 LICENSE "${DESTDIR}${PREFIX}/share/licenses/${NAME}/LICENSE" || \
	  true
	@test -d "${DESTDIR}${PREFIX}/share/${NAME}" && \
	  (find "${DESTDIR}${PREFIX}/share/${NAME}" -type d -exec chmod 755 {} \; ; \
	  find "${DESTDIR}${PREFIX}/share/${NAME}" -type f -exec chmod 644 {} \;) || \
	  true

export:
	@cp -i -v "${ROOTDIR}/Makefile" "${ROOTDIR}/SConstruct" .

clean:
	@scons ${SCONSFILEARG} -Q clean win64=${win64}
	@-rm -vf callgrind.out.*

# fastclean only removes the executable and *.o
fastclean:
ifeq (1,${win64})
	@-rm -vf ${NAME}.exe *.o
else
	@-rm -vf ${NAME} *.o
endif
	@-rm -vf callgrind.out.*

# like install, but override DESTDIR in order to place everything in "${pkgdir}"
pkg: DESTDIR ?= ${pkgdir}
pkg: install

valgrind: main
	-valgrind --tool=callgrind ./${NAME} || valgrind --tool=callgrind ./src/main || echo 'Is Valgrind installed?'
	-gprof2dot -f callgrind callgrind.out.* | dot -Tsvg -o output.svg || echo 'Are gprof2dot and dot installed?'
	-kcachegrind callgrind.out.* || echo 'Is kcachegrind installed?'

fmt:
	@-for ext in cpp cc cxx h hpp; do \
	  clang-format --style=Chromium -i *.$$ext 2>/dev/null ; \
	done || true

make:
	@test -f Makefile && echo 'ERROR: Makefile already exists, will not overwrite' && exit 1 || true
	@echo -e ".PHONY: clean\n\n${NAME}:" > Makefile
	@echo -n 'Generating Makefile... '
	@sm rebuild | grep -v "Discovering" | grep -v "Removed" | sed 's/^/\t/g' >> Makefile
	@echo -e "\nclean:\n\trm -f ${NAME} *.o common/*.o include/*.o\n" >> Makefile
	@echo 'OK'

script:
	@test -f build.sh && echo 'ERROR: build.sh already exists, will not overwrite' && exit 1 || true
	@test -f clean.sh && echo 'ERROR: clean.sh already exists, will not overwrite' && exit 1 || true
	@echo -n 'Generating build.sh... '
	@echo -e '#!/bin/sh\necho -n "Building... "' > build.sh
	@sm rebuild | grep -v "Discovering" | grep -v "Removed" >> build.sh
	@echo 'test $$? -eq 0 && echo OK' >> build.sh
	@chmod +x build.sh
	@echo OK
	@echo -n 'Generating clean.sh... '
	@echo -e "#!/bin/sh\necho -n 'Cleaning... '\nrm -f ${NAME} *.o common/*.o include/*.o" > clean.sh
	@echo 'test $$? -eq 0 && echo OK' >> clean.sh
	@chmod +x clean.sh
	@echo OK

